Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
library(greenbrown)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
dt[,1]
detach("package:remotes", unload = TRUE)
# dt<-as.data.frame(
# as.Date(c('2015-8-8','2016-8-15','2017-8-15','2018-9-4','2019-8-12','2020-8-14')))
dt<-as.data.frame(
dates(c('1984-06-30', '1985-06-30', '1986-06-30', '1987-06-30', '1988-06-30', '1989-06-30', '1990-06-30',
'1991-06-30', '1992-06-30', '1993-06-30', '1994-06-30', '1995-06-30', '1996-06-30', '1997-06-30',
'1998-06-30', '1999-06-30', '2000-06-30', '2001-06-30', '2002-06-30', '2003-06-30', '2004-06-30',
'2005-06-30', '2006-06-30', '2007-06-30', '2008-06-30', '2009-06-30', '2010-06-30', '2011-06-30',
'2012-06-30', '2013-06-30', '2014-06-30', '2015-06-30', '2016-06-30', '2017-06-30', '2018-06-30',
'2019-06-30', '2020-06-30', '2021-06-30')))
writeRaster(proc.sen.ndvi[[6]], "chidliak_1990.tif", options=c("COMPRESS=NONE", "TFW=YES"))
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
bfastts(proc.sen.ndvi, dates[,1])
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
warnings()
get(proc.sen.ndvi)
get(proc.sen.ndvi$Chidliak_20221216_T1_1984_Mosaic_NDVI)
ns
imgs.sen.ndvi <- stack(imgs.sen.ndvi)
# dt<-as.data.frame(
# as.Date(c('2015-8-8','2016-8-15','2017-8-15','2018-9-4','2019-8-12','2020-8-14')))
dt<-as.data.frame(
as.Date(c('1984-06-30', '1985-06-30', '1986-06-30', '1987-06-30', '1988-06-30', '1989-06-30', '1990-06-30',
'1991-06-30', '1992-06-30', '1993-06-30', '1994-06-30', '1995-06-30', '1996-06-30', '1997-06-30',
'1998-06-30', '1999-06-30', '2000-06-30', '2001-06-30', '2002-06-30', '2003-06-30', '2004-06-30',
'2005-06-30', '2006-06-30', '2007-06-30', '2008-06-30', '2009-06-30', '2010-06-30', '2011-06-30',
'2012-06-30', '2013-06-30', '2014-06-30', '2015-06-30', '2016-06-30', '2017-06-30', '2018-06-30',
'2019-06-30', '2020-06-30', '2021-06-30')))
imgs.sen.ndvi <- setZ(imgs.sen.ndvi, dt[,1], "Date")
## Create a processing version of the raster
proc.sen.ndvi <- imgs.sen.ndvi
## Plotting
## pal <- palette(brewer.pal(n = 11, name = "BrBG")) # palette option if needed.
plot(CHext_LSA)
plot(proc.sen.ndvi)
plot(proc.sen.ndvi)
writeRaster(proc.sen.ndvi[[6]], "chidliak_1990.tif", options=c("COMPRESS=NONE", "TFW=YES"))
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
writeRaster(proc.sen.ndvi, "chidliak.tif", options=c("COMPRESS=NONE", "TFW=YES"))
writeRaster(proc.sen.ndvi, "chidliak.tif", options=c("COMPRESS=NONE", "TFW=YES"))
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
Trend.sen <- TrendRaster(proc, start=c(1984, 1), freq=1, method="AAT", breaks=1)
proc <- setZ(proc, dt[,1], "Date")
Trend.sen <- TrendRaster(proc, start=c(1984, 1), freq=1, method="AAT", breaks=1)
imgs.sen.ndvi <- stack(imgs.sen.ndvi, na.rm=TRUE)
# dt<-as.data.frame(
# as.Date(c('2015-8-8','2016-8-15','2017-8-15','2018-9-4','2019-8-12','2020-8-14')))
dt<-as.data.frame(
as.Date(c('1984-06-30', '1985-06-30', '1986-06-30', '1987-06-30', '1988-06-30', '1989-06-30', '1990-06-30',
'1991-06-30', '1992-06-30', '1993-06-30', '1994-06-30', '1995-06-30', '1996-06-30', '1997-06-30',
'1998-06-30', '1999-06-30', '2000-06-30', '2001-06-30', '2002-06-30', '2003-06-30', '2004-06-30',
'2005-06-30', '2006-06-30', '2007-06-30', '2008-06-30', '2009-06-30', '2010-06-30', '2011-06-30',
'2012-06-30', '2013-06-30', '2014-06-30', '2015-06-30', '2016-06-30', '2017-06-30', '2018-06-30',
'2019-06-30', '2020-06-30', '2021-06-30')))
imgs.sen.ndvi <- setZ(imgs.sen.ndvi, dt[,1], "Date")
## Create a processing version of the raster
proc.sen.ndvi <- imgs.sen.ndvi
## Plotting
## pal <- palette(brewer.pal(n = 11, name = "BrBG")) # palette option if needed.
plot(CHext_LSA)
plot(proc.sen.ndvi)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
a <- rasterToPoints(proc.sen.ndvi)
View(a)
Trend.sen <- TrendRaster(a, start=c(1984, 1), freq=1, method="AAT", breaks=1)
b<-bfastts(a, dates[,1])
b<- raster(a)
b<- brick(a)
raster
b<- raster(a)
Trend.sen <- TrendRaster(b, start=c(1984, 1), freq=1, method="AAT", breaks=1)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
b<- raster(a)
View(b)
b<-points2grid(a)
c<- brick(b)
b<-SpatialPixels(a)
c<- brick(b)
View(c)
c<- brick(proc.sen.ndvi, values=TRUE, n1=38)
View(c)
imgs.sen.ndvi <- stackOpen(imgs.sen.ndvi, na.rm=TRUE)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b<-SpatialPixels(a)
c<- stackOpen(proc.sen.ndvi)
#calculate the mean - then remove the mean values < 0.2
m.proc.sen.ndvi <- calc(proc.sen.ndvi, fun = mean)
m.proc.sen.ndvi[m.proc.sen.ndvi > 0.1] <- NA
m.proc.sen.ndvi[m.proc.sen.ndvi > 1] <- NA
m.proc.sen.ndvi[m.proc.sen.ndvi < -1] <- NA
#
proc.sen.ndvi <- mask(proc.sen.ndvi,m.proc.sen.ndvi)
plot(proc.sen.ndvi)
#
proc.sen.ndvi <- mask(proc.sen.ndvi,m.proc.sen.ndvi, na.rm=TRUE)
plot(proc.sen.ndvi)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
View(proc.sen.ndvi)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b<-SpatialPixels(a)
# c<- stackOpen(proc.sen.ndvi)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = min)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b<-SpatialPixels(a)
# c<- stackOpen(proc.sen.ndvi)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = max)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b<-SpatialPixels(a)
# c<- stackOpen(proc.sen.ndvi)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = mean)
View(proc.sen.ndvi)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
Trend.sen <- TrendRaster(a, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = mean)
b <- SpatialPixels(a, CRS("epsg:32619"))
b <- SpatialPixels(a, CRS="epsg:32619")
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
b <- SpatialPixels(a, proj4string ="epsg:32619")
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE, nrs=38)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE, nrs=dt[,1])
a@coords.nrs
sp::coordinates(a, nrs)<-dt[1]
sp::coordinates(a@coords.nrs)<-dt[1]
sp::coordnames(a)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
View(proc.sen.ndvi)
b <- raster(proc.sen.ndvi)
b <- rast(proc.sen.ndvi)
b <- rast(proc.sen.ndvi, time = dt[,1])
b <- rast(proc.sen.ndvi, time = time(dt[,1]))
b <- rast(proc.sen.ndvi, time = time(dt[,1]))
b <- rast(proc.sen.ndvi, time = ts(dt[,1]))
b <- rast(proc.sen.ndvi, time=dates[,1])
b <- rast(proc.sen.ndvi, time=dates[,1], lyrs=38)
b <- rast(proc.sen.ndvi, time=dates[,1], nlyrs=38)
sp::coordnames()
b <- rast(proc.sen.ndvi, time=dates[,1], nlyrs=38)
b <- rast(proc.sen.ndvi, time=ts(dates[,1]), nlyrs=38)
b <- rast(proc.sen.ndvi, time=timestamp(dates[,1]), nlyrs=38)
timeDate::timeDate(date[,1])
timeDate::timeDate(dates)
timeDate::timeDate(dates[,1])
b <- rast(proc.sen.ndvi, time=timeDate(dates), nlyrs=38)
b <- raster(a)
b <- raster::extract(proc.sen.ndvi, a)
ts(a, start=1, frequency = 1)
ts(a$Chidliak_20221216_T1_1984_Mosaic_NDVI, start=1, frequency = 1)
ts(a[[]], start=1, frequency = 1)
ts(a[[,]], start=1, frequency = 1)
ts(a[3:30], start=1, frequency = 1)
ts(a@data, start=1, frequency = 1)
b<- ts(a@data, start=1, frequency = 1)
Trend(b)
b
class(b)
b["mts"]
b["ts"]
b
bfastts(a, dates, type = "annual")
bfastts(a, dates, type = "365-day")
bfastts(a@data, dates, type = "365-day")
length(a$Chidliak_20221216_T1_1984_Mosaic_NDVI)
b<- ts(a@data, start=1, frequency = 54984)
Trend(b)
View(b)
b
b<- as.ts(a)
Trend(a)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(a, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = mean)
b <- brick(a)
b <- stack(a)
View(b)
b <- brick(x = proc.sen.ndvi@data)
b <- brick(x = proc.sen.ndvi@file)
b <- brick(x = proc.sen.ndvi, values=TRUE, nl=38)
## Create a raster stack
imgs.sen.raw <- raster::stack(files.sen.ndvi, values=TRUE)/10000
## Create a raster stack
imgs.sen.raw <- raster::stack(files.sen.ndvi)/10000
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(a, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = mean)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(b, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = mean)
b <- brick(x = proc.sen.ndvi, values=TRUE, nl=38)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(b, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = mean)
b <- brick(x = proc.sen.ndvi, nl=38)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(b, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = mean)
b <- brick(x = proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(b, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = mean)
## Create a raster stack
imgs.sen.raw <- raster::stack(files.sen.ndvi)/10000
plot(proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = mean)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = max)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = "max")
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=0)
b <- brick(proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(b, start=c(1984, 1), freq=1, method="AAT", breaks=0)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(proc.sen.ndvi@data, start=c(1984, 1), freq=1, method="AAT", breaks=0)
proc.sen.ndvi@z
ndvimap
proc.sen.ndvi
proc.sen.ndvi<-setZ(proc.sen.ndvi, dates[,1], "Date")
proc.sen.ndvi<-setZ(proc.sen.ndvi, dt[,1], "Date")
proc.sen.ndvi
ndvimap
proc.sen.ndvi
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b <- brick(proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=0)
library(bfast)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=0)
writeRaster(proc.sen.ndvi, "test.tiff")
b <- raster("test.tiff")
b
b[2]
b <- raster("test.tiff",nlyrs=38)
b
b <- raster("test.tiff",layer=38)
b
b <- raster("test.tiff",band=38)
b
b <- raster("test.tiff",band=38, values=TRUE)
b
b@data
b <- raster("test.tiff",band=38, values=TRUE,native=TRUE)
b
b@data
raster(b)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b <- brick(proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=0)
proc.sen.ndvi
ndvimap
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b <- brick(proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = max)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b <- brick(proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
proc.sen.ndvi.0 <- clamp(proc.sen.ndvi, lower=0, upper=1)
Trend.sen <- TrendRaster(proc.sen.ndvi.0, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = max)
proc.sen.ndvi.0
## Import the rasters
files.sen.ndvi <- list.files("reprojected/", "*.tiff", recursive=FALSE, full.names=TRUE)
## Create a raster stack
imgs.sen.raw <- raster::stack(files.sen.ndvi)/10000
## Create a raster stack
imgs.sen.raw <- raster::stack(files.sen.ndvi)/10000
## Scale the raster to NDVI values
imgs.sen.ndvi <- raster::clamp(imgs.sen.raw , lower = -1, upper = 1)
imgs.sen.ndvi <- rast(imgs.sen.ndvi)
## Mask to the project LSA
CHext_LSA <- vect("Chidliak_NDVI_StudyArea_dec16/Chidliak_NDVI_StudyArea_dec16.shp")
imgs.sen.ndvi <- mask(imgs.sen.ndvi,CHext_LSA)
imgs.sen.ndvi <- stack(imgs.sen.ndvi, na.rm=TRUE)
imgs.sen.ndvi <- stack(imgs.sen.ndvi)
# dt<-as.data.frame(
# as.Date(c('2015-8-8','2016-8-15','2017-8-15','2018-9-4','2019-8-12','2020-8-14')))
dt<-as.data.frame(
as.Date(c('1984-06-30', '1985-06-30', '1986-06-30', '1987-06-30', '1988-06-30', '1989-06-30', '1990-06-30',
'1991-06-30', '1992-06-30', '1993-06-30', '1994-06-30', '1995-06-30', '1996-06-30', '1997-06-30',
'1998-06-30', '1999-06-30', '2000-06-30', '2001-06-30', '2002-06-30', '2003-06-30', '2004-06-30',
'2005-06-30', '2006-06-30', '2007-06-30', '2008-06-30', '2009-06-30', '2010-06-30', '2011-06-30',
'2012-06-30', '2013-06-30', '2014-06-30', '2015-06-30', '2016-06-30', '2017-06-30', '2018-06-30',
'2019-06-30', '2020-06-30', '2021-06-30')))
imgs.sen.ndvi <- setZ(imgs.sen.ndvi, dt[,1], "Date")
# proc <- setZ(proc, dt[,1], "Date")
## Create a processing version of the raster
proc.sen.ndvi <- imgs.sen.ndvi
## Plotting
## pal <- palette(brewer.pal(n = 11, name = "BrBG")) # palette option if needed.
plot(CHext_LSA)
plot(proc.sen.ndvi)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b <- brick(proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
proc.sen.ndvi.0 <- clamp(proc.sen.ndvi, lower=0, upper=1)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b <- brick(proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
proc.sen.ndvi.0 <- clamp(proc.sen.ndvi, lower=0, upper=1)
Trend.sen <- TrendRaster(proc.sen.ndvi.0, start=c(1984, 1), freq=1, method="AAT", breaks=1, funAnnual = max)
plot(proc.sen.ndvi)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
proc.sen.ndvi.0[is.na(proc.sen.ndvi.0)] <- -2
proc.sen.ndvi.0[is.na(proc.sen.ndvi.0)] <- -2
proc.sen.ndvi.0[is.na(proc.sen.ndvi.0)] <
View(proc.sen.ndvi)
## Import the rasters
files.sen.ndvi <- list.files("reprojected/", "*.tiff", recursive=FALSE, full.names=TRUE)
## Create a raster stack
imgs.sen.raw <- raster::stack(files.sen.ndvi)/10000
## Create a raster stack
imgs.sen.raw <- raster::stack(files.sen.ndvi)/10000
## Scale the raster to NDVI values
imgs.sen.ndvi <- raster::clamp(imgs.sen.raw , lower = -1, upper = 1)
imgs.sen.ndvi <- rast(imgs.sen.ndvi)
## Mask to the project LSA
CHext_LSA <- vect("Chidliak_NDVI_StudyArea_dec16/Chidliak_NDVI_StudyArea_dec16.shp")
imgs.sen.ndvi <- mask(imgs.sen.ndvi,CHext_LSA)
imgs.sen.ndvi <- stack(imgs.sen.ndvi)
# dt<-as.data.frame(
# as.Date(c('2015-8-8','2016-8-15','2017-8-15','2018-9-4','2019-8-12','2020-8-14')))
dt<-as.data.frame(
as.Date(c('1984-06-30', '1985-06-30', '1986-06-30', '1987-06-30', '1988-06-30', '1989-06-30', '1990-06-30',
'1991-06-30', '1992-06-30', '1993-06-30', '1994-06-30', '1995-06-30', '1996-06-30', '1997-06-30',
'1998-06-30', '1999-06-30', '2000-06-30', '2001-06-30', '2002-06-30', '2003-06-30', '2004-06-30',
'2005-06-30', '2006-06-30', '2007-06-30', '2008-06-30', '2009-06-30', '2010-06-30', '2011-06-30',
'2012-06-30', '2013-06-30', '2014-06-30', '2015-06-30', '2016-06-30', '2017-06-30', '2018-06-30',
'2019-06-30', '2020-06-30', '2021-06-30')))
imgs.sen.ndvi <- setZ(imgs.sen.ndvi, dt[,1], "Date")
# proc <- setZ(proc, dt[,1], "Date")
## Create a processing version of the raster
proc.sen.ndvi <- imgs.sen.ndvi
## Plotting
## pal <- palette(brewer.pal(n = 11, name = "BrBG")) # palette option if needed.
plot(CHext_LSA)
plot(proc.sen.ndvi)
plot(proc.sen.ndvi)
writeRaster(proc.sen.ndvi, "chidliak.tif", options=c("COMPRESS=NONE", "TFW=YES"))
View(imgs.sen.ndvi)
imgs.sen.ndvi
imgs.sen.ndvi@layers
imgs.sen.raw@data@attributes
imgs.sen.raw
View(imgs.sen.raw)
imgs.sen.ndvi@filename
imgs.sen.raw@file@nodatavalue
proc.sen.ndvi@layers
proc.sen.ndvi[names]
proc.sen.ndvi["names"]
proc.sen.ndvi@filename
proc.sen.ndvi
names(proc.sen.ndvi)
proc.sen.ndvi@layers[[1]]@file@nodatavalue <- NaN
proc.sen.ndvi@layers[[1]]@file@nodatavalue
for (i in 38){}
for (i in 38){proc.sen.ndvi@layers[[i]]@file@nodatavalue <- NaN}
proc.sen.ndvi@layers[[3]]@file@nodatavalue <- NaN
proc.sen.ndvi@layers[[4]]@file@nodatavalue
proc.sen.ndvi@layers[[3]]@file@nodatavalue
for (i in seq(38)){print(i)}
for (i in seq(38)){proc.sen.ndvi@layers[[i]]@file@nodatavalue <- NaN}
proc.sen.ndvi@layers[[5]]@file@nodatavalue
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
proc.sen.ndvi
proc.sen.ndvi@layers[[5]]@file@nodatavalue
proc.sen.ndvi[is.infinite(proc.sen.ndvi)] <- NaN
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b <- brick(proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
View(proc.sen.ndvi)
## Using greenbrown package to create a trend raster map
## See ?TrendRaster for details
# a <- rasterToPoints(proc.sen.ndvi, spatial = TRUE)
# b <- brick(proc.sen.ndvi)
# b <- raster::extract(proc.sen.ndvi, a)
proc.sen.ndvi@file@nodatavalue <- NaN
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
proc.sen.ndvi <- setZ(proc.sen.ndvi, dt[1,], "Date")
# dt<-as.data.frame(
# as.Date(c('2015-8-8','2016-8-15','2017-8-15','2018-9-4','2019-8-12','2020-8-14')))
dt<-as.data.frame(
as.Date(c('1984-06-30', '1985-06-30', '1986-06-30', '1987-06-30', '1988-06-30', '1989-06-30', '1990-06-30',
'1991-06-30', '1992-06-30', '1993-06-30', '1994-06-30', '1995-06-30', '1996-06-30', '1997-06-30',
'1998-06-30', '1999-06-30', '2000-06-30', '2001-06-30', '2002-06-30', '2003-06-30', '2004-06-30',
'2005-06-30', '2006-06-30', '2007-06-30', '2008-06-30', '2009-06-30', '2010-06-30', '2011-06-30',
'2012-06-30', '2013-06-30', '2014-06-30', '2015-06-30', '2016-06-30', '2017-06-30', '2018-06-30',
'2019-06-30', '2020-06-30', '2021-06-30')))
proc.sen.ndvi <- setZ(proc.sen.ndvi, dt[1,], "Date")
proc.sen.ndvi <- setZ(proc.sen.ndvi, dt[,1], "Date")
Trend.sen <- TrendRaster(proc.sen.ndvi, start=c(1984, 1), freq=1, method="AAT", breaks=1)
ig
knitr::opts_chunk$set(echo = TRUE)
shape <- terra::vect("shapefile/Split4/StudyArea_split4.shp")
tname <- "./temp"
rasterOptions(tmpdir = tname, memfrac=0.1)
library(raster)
library(greenbrown)
library(terra)
library(parallel)
# setwd("")
shape <- terra::vect("shapefile/Split4/StudyArea_split4.shp")
tname <- "./temp"
rasterOptions(tmpdir = tname, memfrac=0.1)
infiles <- list.files("Inputs/NDWI_reprojected/", "*.tiff", recursive=FALSE, full.names=TRUE)
imgsraw <- terra::rast(infiles)
imgsNDWI <- terra::clamp(imgsraw, lower = -1, upper = 1)
imgsNDWI <- terra::clamp(imgsraw, lower = -1, upper = 1)
imgsNDWImasked <- mask(imgsNDWI,shape)
pl
knitr::opts_chunk$set(echo = TRUE)
cl <- parallel::makeCluster(parallel::detectCores())
cl
parallel::clusterExport(cl, c("in.years"))
in.years = time("1984")
in.years = time("1984", format="years")
in.years = time("1984", format="years") + 1984 + 0:2
in.years = time(format="years") + 1984 + 0:2
library(foreach)
s3://sat-ldnufnlands/LdnUfnLands_TrendAnalysis_20230528/
setwd("Github/Caribou_Quintette/rad/data/BM/WI/Job_4/")
##############Actual Data###############
Caribou_BMTR <- read.delim2("Job_4.txt", sep = "\t")
##############Actual Data###############
Caribou_BMTR <- read.delim("Job_4.txt", sep = "\t")
##############Actual Data###############
Caribou_BMTR <- read.delim("Job_4.txt", sep = "\t")
View(Caribou_BMTR)
list.of.packages <- c(
"foreach",
"future",
"future.apply",
"future.batchtools",
"doParallel",
"rslurm",
"here",
"adehabitatLT",
"adehabitatHR",
"rgdal",
"terra",
"sf"
)
# Check if installed, else install
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages) > 0){
install.packages(new.packages, dep=TRUE)
}
# Load required packages
for(package.i in list.of.packages){
suppressPackageStartupMessages(
library(
package.i,
character.only = TRUE
)
)
}
##############Actual Data###############
Caribou_BMTR <- read.delim("Job_4.txt", sep = "\t")
x = "E" # Easting
y = "N" # Northing
## See depreciated: https://inbo.github.io/tutorials/tutorials/spatial_crs_coding/
crs.proj <- CRS(SRS_string = "EPSG:26910") # For raster formatting
input.projection = "+init=epsg:26910" # For SpatialDataFrame formatting
Datecolumn= "Date"
Timecolumn= "Time"
timezone = "GMT"
loc.output <- paste0("adeHRoutput/")
wd <- getwd()
wd <- getwd()
setwd(paste("Github/Caribou_Quintette/rad", "data", "**SA**/**SEASON**/Job_**JOBID**/", sep = "/")
setwd(paste("Github/Caribou_Quintette/rad", "data", "**SA**/**SEASON**/Job_**JOBID**/", sep = "/"))
newwd <- paste("Github/Caribou_Quintette/rad", "data", "**SA**/**SEASON**/Job_**JOBID**/", sep = "/")
newwd
setwd(newwd)
